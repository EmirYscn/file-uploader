// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  username    String
  email       String        @unique
  password    String
  files       File[]
  folders     Folder[]
  folderShare FolderShare[]
  fileShare   FileShare[]
}

model File {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  size       Float
  uploadDate DateTime @default(now())
  uploadedBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  folder     Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   Int?
  sharedTo   FileShare[]
}

model Folder {
  id        Int           @id @default(autoincrement())
  name      String
  fileCount Int           @default(0)
  size      Float         @default(0.0)
  createdAt DateTime      @default(now())
  parent    Folder?       @relation("ParentFolder", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  children  Folder[]      @relation("ParentFolder")
  files     File[]
  createdBy User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  sharedTo  FolderShare[]
}

model FolderShare {
  id          Int    @id @default(autoincrement())
  folder      Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    Int
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  expireDate  DateTime?
  accessType  accessType?

  @@unique([folderId, userId])
}

model FileShare {
  id       Int    @id @default(autoincrement())
  file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  expireDate  DateTime?
  accessType  accessType?
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum accessType {
  LIMITED
  FULL
}